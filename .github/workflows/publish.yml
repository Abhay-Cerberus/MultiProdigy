name: package-publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref (branch or tag) to build/publish'
        required: false
        default: 'main'

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_info.outputs.package_name }}
      new_version:  ${{ steps.package_info.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}
      - id: package_info
        name: Get Package Info
        run: |
          PACKAGE_NAME=$(grep -Po '(?<=^name = ")[^"]+' pyproject.toml)
          NEW_VERSION=$(grep -Po '(?<=^version = ")[^"]+' pyproject.toml)
          echo "package_name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          pkg=${{ needs.details.outputs.package_name }}
          resp=$(curl -sSf "https://pypi.org/pypi/${pkg}/json" || echo "{}")
          latest=$(echo "$resp" | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -1)
          echo "latest_previous_version=${latest:-0.0.0}" >> $GITHUB_ENV
      - name: Compare versions
        run: |
          NEW=${{ needs.details.outputs.new_version }}
          if [[ "$NEW" == "$latest_previous_version" || "$(printf '%s\n' "$latest_previous_version" "$NEW" | sort -rV | head -1)" != "$NEW" ]]; then
            echo "::error::New version $NEW is not greater than latest $latest_previous_version"
            exit 1
          fi

  test:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: generate poetry.lock
        run: poetry lock

      - name: Install dependencies
        run: poetry install

      - name: Run tests
        run: poetry run pytest --disable-warnings

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: generate poetry.lock
        run: poetry lock

      - name: Install dependencies and build
        run: |
          poetry install
          poetry build

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    needs: [build, details]
    runs-on: ubuntu-latest
    environment:
      name: publish-framework
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
